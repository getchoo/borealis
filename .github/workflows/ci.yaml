name: CI

on:
  pull_request:
  workflow_call:
    secrets:
      CACHIX_AUTH_TOKEN:
        description: "auth token for cachix"
  workflow_dispatch:

jobs:
  eval:
    name: Evaluate flake
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.eval.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: getchoo
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Evaluate jobs
        id: eval
        run: |
          set -euo pipefail

          matrix=$(nix shell --inputs-from . \
            nixpkgs#{bash,coreutils,jq,nix-eval-jobs} \
            --command ./.github/eval-flake.sh)

          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  build:
    needs: eval

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.eval.outputs.matrix) }}

    name: Build (${{ matrix.attr }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        if: ${{ !matrix.isCached }}

      - name: Install Nix
        if: ${{ !matrix.isCached }}
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Cachix
        if: ${{ !matrix.isCached }}
        uses: cachix/cachix-action@v13
        with:
          name: getchoo
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Run build
        if: ${{ !matrix.isCached }}
        run: |
          nix build \
            --accept-flake-config \
            --print-build-logs \
            --fallback \
            .#hydraJobs.${{ matrix.attr }}

  check:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    name: Check flake (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: getchoo
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Run check
        run: |
          nix flake check \
            --accept-flake-config \
            --print-build-logs \
            --fallback \
            --show-trace \
            --allow-import-from-derivation

  gate:
    needs: [build, check]

    name: CI Gate
    runs-on: ubuntu-latest

    if: always()

    steps:
      - name: Exit with result
        run: |
          build_result="${{ needs.build.result }}"
          check_result="${{ needs.check.result }}"
          results=("$build_result" "$check_result")
          for result in "${results[@]}"; do [ "$result" != "success" ] && exit 1; done
          exit 0
